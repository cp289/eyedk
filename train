#!/usr/bin/python3

import os, sys
import cv2 as cv
import pickle

import eyes

# Training data directories
TRAINPOS = 'data/train/face'
TRAINNEG = 'data/train/non-face'

# Testing data directories
TESTPOS = 'data/test/face'
TESTNEG = 'data/test/non-face'

# The number of classifiers to train
N_WEAK_CLASSIFIERS = 5

# Caching files to read from and write to
TRAIN_DATA_FILE = 'training_data.pkl'
TEST_DATA_FILE = 'testing_data.pkl'
CLASS_FILE = 'classifier.pkl'

# Read image data from both positive and negative image directories
def getData(dirpos, dirneg, exts=('.jpg','.jpeg','.png','.pgm'), save=False,
        save_file=TRAIN_DATA_FILE ):

    # Recursively find all files in data directories

    pfiles = []
    nfiles = []

    for d in os.walk(dirpos):
        pfiles += [ os.path.join(d[0], f) for f in d[2] if os.path.splitext(f)[1] in exts]

    for d in os.walk(dirneg):
        nfiles += [ os.path.join(d[0], f) for f in d[2] if os.path.splitext(f)[1] in exts]

    # Read in all images

    pimgs = []
    nimgs = []

    scale = 1   # TODO set scale to ensure image height is fixed

    for f in pfiles:
        pimgs.append(cv.cvtColor(cv.resize(cv.imread(f), (0,0), fx=scale, fy=scale), cv.COLOR_BGR2GRAY))

    for f in nfiles:
        nimgs.append(cv.cvtColor(cv.resize(cv.imread(f), (0,0), fx=scale, fy=scale), cv.COLOR_BGR2GRAY))

    data = [ (p, 0) for p in pimgs ] + [ (n, 1) for n in nimgs ], len(pimgs), len(nimgs)

    print('Loaded image data from', dirpos, 'and', dirneg)

    # Save file if necessary
    if save:
        with open(save_file, 'wb') as f:
            pickle.dump(data, f)

    return data
    
# Train Viola-Jones classifier and save data to files
def train(n_classifiers, train_data_file=TRAIN_DATA_FILE, class_file=CLASS_FILE):

    # Load old training data file to make testing faster
    if os.path.isfile(train_data_file):
        print('Training data file found:', train_data_file)
        with open(train_data_file, 'rb') as f:
            train_data, n_pos, n_neg = pickle.load(f)
    else:
        train_data, n_pos, n_neg = getData(TRAINPOS, TRAINNEG, save=True)

    # Load pre-trained classifier if available
    if os.path.isfile(class_file):
        print('Classifier file found:', class_file)
        vj = eyes.ViolaJones.load(class_file)
    else:
        # Initialize Viola Jones algorithm with 50 weak classifiers
        vj = eyes.ViolaJones(n_classifiers)
        vj.train(train_data, n_pos, n_neg)
        vj.save(class_file)

    return vj

# Test classifier
def test(classifier=None, test_data_file=TEST_DATA_FILE, class_file=CLASS_FILE,
        p_dir=TESTPOS, n_dir=TESTNEG):

    # Load classifier from file if necessary
    if classifier is None:
        # Load old training data file to make testing faster
        if os.path.isfile(class_file):
            print('Classifier file found:', class_file)
            with open(class_file, 'rb') as f:
                classifier = pickle.load(f)
        else:
            print('error: could not find classifier file', class_file)

    # Load old testing data file to make testing faster
    if os.path.isfile(test_data_file):
        print('Testing data file found:', test_data_file)
        with open(test_data_file, 'rb') as f:
            test_data, n_pos, n_neg = pickle.load(f)
    else:
        test_data, n_pos, n_neg = getData(p_dir, n_dir)


    # Compute classifier testing statistics
    pcorrect = 0
    ncorrect = 0

    print('Testing classification on data from', p_dir, 'and', n_dir,'...')

    for img, label in test_data:
        if classifier.classify(img) == label:
            if label == 0:
                pcorrect += 1
            else:
                ncorrect += 1

    correct = pcorrect + ncorrect
    N = len(test_data)

    print('\nTesting Results: positive: %d/%d (%f%%),  negative: %d/%d (%f%%)\n\tTotal accuracy: %d/%d (%f%%)\n' %
            (pcorrect, n_pos, 100*pcorrect/n_pos, ncorrect, n_neg,
                100*ncorrect/n_neg, correct, N, 100*correct/N) )

if __name__ == '__main__':

    # Parse number of weak classifiers from argv
    assert len(sys.argv) <= 2, 'error: no more than 1 argument required'
    if len(sys.argv) == 2:
        N_WEAK_CLASSFIERS = int(sys.argv[1])

    vj = train(N_WEAK_CLASSIFIERS)
    test(vj)
    test(vj, test_data_file='', p_dir='data/train_big/face',
    n_dir='data/train_big/non-face')

